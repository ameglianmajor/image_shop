require 'rails_helper'
require 'open-uri'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ImagesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Image. As you add validations to Image, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ImagesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all images as @images" do
      image = Image.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:images)).to eq([image])
    end
  end

  describe "GET show" do
    it "assigns the requested image as @image" do
      image = Image.create! valid_attributes
      get :show, {:id => image.to_param}, valid_session
      expect(assigns(:image)).to eq(image)
    end
  end

  describe "GET new" do
    it "assigns a new image as @image" do
      get :new, {}, valid_session
      expect(assigns(:image)).to be_a_new(Image)
    end
  end

  describe "GET edit" do
    it "assigns the requested image as @image" do
      image = Image.create! valid_attributes
      get :edit, {:id => image.to_param}, valid_session
      expect(assigns(:image)).to eq(image)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Image" do
        expect {
          post :create, {:image => valid_attributes}, valid_session
        }.to change(Image, :count).by(1)
      end

      it "assigns a newly created image as @image" do
        post :create, {:image => valid_attributes}, valid_session
        expect(assigns(:image)).to be_a(Image)
        expect(assigns(:image)).to be_persisted
      end

      it "redirects to the created image" do
        post :create, {:image => valid_attributes}, valid_session
        expect(response).to redirect_to(Image.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved image as @image" do
        post :create, {:image => invalid_attributes}, valid_session
        expect(assigns(:image)).to be_a_new(Image)
      end

      it "re-renders the 'new' template" do
        post :create, {:image => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested image" do
        image = Image.create! valid_attributes
        put :update, {:id => image.to_param, :image => new_attributes}, valid_session
        image.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested image as @image" do
        image = Image.create! valid_attributes
        put :update, {:id => image.to_param, :image => valid_attributes}, valid_session
        expect(assigns(:image)).to eq(image)
      end

      it "redirects to the image" do
        image = Image.create! valid_attributes
        put :update, {:id => image.to_param, :image => valid_attributes}, valid_session
        expect(response).to redirect_to(image)
      end
    end

    describe "with invalid params" do
      it "assigns the image as @image" do
        image = Image.create! valid_attributes
        put :update, {:id => image.to_param, :image => invalid_attributes}, valid_session
        expect(assigns(:image)).to eq(image)
      end

      it "re-renders the 'edit' template" do
        image = Image.create! valid_attributes
        put :update, {:id => image.to_param, :image => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested image" do
      image = Image.create! valid_attributes
      expect {
        delete :destroy, {:id => image.to_param}, valid_session
      }.to change(Image, :count).by(-1)
    end

    it "redirects to the images list" do
      image = Image.create! valid_attributes
      delete :destroy, {:id => image.to_param}, valid_session
      expect(response).to redirect_to(images_url)
    end
  end

  describe "PUT process_image calls" do

    let(:image) { mock_model(Image).as_null_object }
    let(:test_image_url) { 'http://www.clipartbest.com/cliparts/KTj/49G/KTj49GATq.jpeg' }
    let(:uri_encoded_url) { URI::encode(test_image_url) }

    before do
      Image.stub(:retrieve).and_return(image)
      image.stub(:resize_image).and_return('a resized string image blob')
    end

    it "obtains the resized image" do
      image.stub(:resize_image).and_return('a resized string image blob')

      test_image_url = 'http://www.clipartbest.com/cliparts/KTj/49G/KTj49GATq.jpeg'
      uri_encoded_url = URI::encode(test_image_url)
      new_width = '400'
      new_height = '500'
      image_blob_string = 'a resized string image blob'

      image.stub(:resize_image).and_return(image_blob_string)
      Image.should_receive(:retrieve).
        with(test_image_url).
        and_return(image)
      image.should_receive(:resize_image).
        with(new_width, new_height).
        and_return(image_blob_string)

      put :resize_image,
          url: uri_encoded_url,
          width: new_width,
          height: new_height
      expect(response).to have_http_status(:ok)
    end

    it "obtains the cropped image" do
      image.stub(:crop_image).and_return('a cropped string image blob')

      test_image_url = 'http://www.clipartbest.com/cliparts/KTj/49G/KTj49GATq.jpeg'
      uri_encoded_url = URI::encode(test_image_url)
      upper_left_corner = {x: '50', y: '50'}
      new_width = '150'
      new_height = '150'
      image_blob_string = 'a cropped string image blob'

      image.stub(:crop_image).and_return(image_blob_string)
      Image.should_receive(:retrieve).
        with(test_image_url).
        and_return(image)
      image.should_receive(:crop_image).
        with(upper_left_corner, new_width, new_height).
        and_return(image_blob_string)

      put :crop_image,
        url: uri_encoded_url,
        upper_left_corner: upper_left_corner,
        width: new_width,
        height: new_height
      expect(response).to have_http_status(:ok)
    end
  end

end
